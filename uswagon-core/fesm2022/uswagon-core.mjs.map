{"version":3,"file":"uswagon-core.mjs","sources":["../../../projects/uswagon-core/src/lib/uswagon-core.service.ts","../../../projects/uswagon-core/src/public-api.ts","../../../projects/uswagon-core/src/uswagon-core.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable, OnDestroy } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { CoreConfig, CoreCreateObject, CoreDeleteObject, CoreForm, CoreReadObject, CoreResponse, CoreUpdateObject, SnackbarCoreFeedback } from './types/uswagon-core.types';\nimport {  firstValueFrom } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UswagonCoreService implements OnDestroy {\n   /**\n     * Upload progress indicator on current file upload\n     * \n     * @example\n     * getUploadProgress(){\n     *  return this.API.uploadProgress;\n     * }\n     *  \n   **/\n  public uploadProgress?:number;\n\n  private coreFeedback?:SnackbarCoreFeedback;\n\n  private publicForm:CoreForm = {}\n   /**\n     * Secure form for storing more secure input\n     * \n     * NOTE: This is the form that should be used when building postObjects\n     * \n     * @example\n     * for(let key in this.API.coreForm){\n     *  // process value\n     *  console.log(this.API.coreForm[key]);\n     * }\n     * \n   **/\n  public coreForm:CoreForm = {}\n  \n  private socket?: WebSocket;\n  private config?: CoreConfig;\n  private liveEvents:{[key: string]: (message: MessageEvent) => void } = {};\n\n\n  constructor(\n    private http: HttpClient,\n    private router: Router,\n  ) { }\n\n  // INITIALIZATION\n  /**\n     * Initializes the service for the project\n     * @param config - configuration that points the service to its appropriate server\n     * \n     * @example\n     * this.API.initialize({\n     *  api:environment.api,\n     *  apiKey: environment.apiKey,\n     *  nodeserver: environment.nodeserver,\n     *  server: environment.server,\n     *  socket: environment.socket\n     * })\n     * \n   **/\n  initialize(config:CoreConfig){\n    this.config = config;\n    this.socket = new WebSocket(config.socket);\n    this.socket.binaryType = 'arraybuffer';\n    this.socket!.onmessage = (message)=>{\n      var decodedMessage = new TextDecoder('utf-8').decode(message.data);\n      const socketData = JSON.parse(decodedMessage);\n      if(socketData.app != config.app) return;\n      for (const id in this.liveEvents) {\n          this.liveEvents[id](socketData.data);\n      }\n    }\n  }\n\n   /**\n     * Add a new live listener from the server's websocket\n     * \n     * @param id - Unique identifier for the listeners to avoid collisions\n     * @param handler - Websocket messages are passed to this handler\n     *\n     * @example\n     * this.API.addLiveListener('event-1',(message:{[key:string]:any})=>{\n     *  OUTPUT:\n     *  // same as the json sent from socketSend(data)\n     *  // logics are applied here so that messages are only received on specific clients\n     *  console.log(message);\n     * })\n     * \n     * \n   **/\n  addSocketListener( id:string,handler:(message: {[key:string]:any})=>void) {\n    if(this.config == undefined){\n      alert('Config must be initialized, try service.initialize(config)');\n    }\n    this.liveEvents[id]= handler;\n  }\n  /**\n     * Get list of live listeners in the project\n     *\n     * @example\n     * this.API.getListeners();\n     * \n     * OUTPUT: An alert showing list of listeners\n     * \n     * \n   **/\n  getListeners() {\n    if(this.config == undefined){\n      alert('Config must be initialized, try service.initialize(config)');\n    }\n    alert(JSON.stringify(Object.keys(this.liveEvents)));\n  }\n  /**\n     * Sends a message to the websocket\n     * @param data - A json object message\n     *\n     * @example\n     * this.API.socketSend({\n     *    to: student.id,\n     *    message: message,\n     * })\n     * \n     * \n   **/\n  socketSend(data: object) {\n    if(this.config == undefined){\n      alert('Config must be initialized, try service.initialize(config)');\n    }\n    this.socket!.onopen = ()=>{\n      this.socket!.send(\n        JSON.stringify({ key: this.config?.apiKey, data: data })\n      );\n    }\n  }\n  \n  ngOnDestroy(): void {\n    this.socket?.close();\n  }\n\n  private pgEscapeString(input: string): string {\n    if (typeof input !== 'string') {\n        throw new TypeError('Input must be a string');\n    } \n    // Escape single quotes by replacing them with two single quotes\n    return input.replace(/'/g, \"''\");\n  }\n\n  /**\n     * Builds a CoreForm from user input\n     *\n     * @param key - A string reference to form key\n     * @param value - A string representing the value of a form key\n     * \n     * @example\n     * \n     * handleInput(key: string, value: string){\n     *  this.API.handleFormValue('email', event.target.value); // key should be initialized using createForm()\n     * }\n     * \n     * OUTPUT:\n     * <input (change)='handleInput(\"email\", $event)' > \n     *\n     * \n     * \n   **/\n  handleFormValue(key:string, value:string){\n    this.publicForm[key] = value; \n    this.coreForm[key] = this.pgEscapeString(value);\n  }\n   /**\n     * Builds a CoreForm from user input\n     *\n     * @param key - A string reference to form key\n     * \n     * @example\n     * \n     * getInput(key:string){\n     *  return this.API.getFormValue(key);\n     * }\n     * \n     * OUTPUT:\n     * <div>{{getInput('email')}}</div>\n     * \n   **/\n   getFormValue(key:string){\n    if(this.publicForm[key] === undefined){\n      alert('Please initialize the form using createForm([form])');\n    }\n    return this.publicForm[key];\n  }\n\n  /**\n     * Initialize a CoreForm\n     *\n     * @param keys - A list of strings representing form keys\n     * \n     * @example\n     * this.API.createForm(['email']);\n     *  \n     * OUTPUT:\n     * console.log(this.API.coreForm); \n     * \n     * \n   **/\n  createForm(keys:string[]){\n    this.publicForm = keys.reduce((prev:any,curr:any)=>{\n      return Object.assign(prev, {[curr]:''})\n    },{})\n    this.coreForm = keys.reduce((prev:any,curr:any)=>{\n      return Object.assign(prev, {[curr]:''})\n    },{})\n  }\n\n  // UTILITIES\n  /**\n     * Creates a hash from the server for encrypting data\n     *\n     * @param encrypt - A string to encrypt\n     * \n     * @example\n     * \n     * this.API.sendFeedback('succes', 'Pushed data!')\n     * \n   **/\n    sendFeedback(type:'success'|'error'|'neutral'|'warning',message:string, timer?:number){\n      this.coreFeedback = {\n        type: type,\n        message: message,\n      }\n      \n      if (timer != undefined) {\n        // Set a timer to reset the snackbar feedback after 2 seconds\n        setTimeout(() => {\n          this.coreFeedback = undefined;\n        }, timer);\n      }\n    }\n  /**\n     * Store API feedback for snackbars and other display feedback\n     * \n     * @returns - A feedback object with {type, message}\n     * \n     * @example\n     * \n     * getFeedback(){\n     *   return this.API.getFeedback();\n     * }\n     * \n     * OUTPUT:\n     *  // Snackbars in app.component.ts (root)\n     *  <div class='snackbar' *ngIf='getFeedback().type != undefined'> Some Feedback </div>\n     * \n     * \n   **/\n    getFeedback(){\n      return this.coreFeedback;\n    }\n   /**\n     * Creates a hash from the server for non decryptable data\n     *\n     * @param text - A string to encrypt\n     * \n     * @returns A string hash or null if an error has occured\n     *\n     * @example\n     * const hash = this.API.hash('ken');\n     * if(hash){\n     *  console.log(hash);\n     * }else{\n     *  console.log('ERROR');\n     * }\n     * \n   **/\n  async hash(text:string){\n    const response =  await firstValueFrom(this.post('get_hash', {text: text}))\n    if(response.success){\n      return response.output;\n    }else{\n      return null;\n    }\n  }\n   /**\n     * Encrypts a text \n     *\n     * @param text - A string to encrypt\n     * \n     * @returns A string an encrypted text or null if an error has occured\n     *\n     * @example\n     * const encrypted = this.API.encrypt('ken');\n     * if(encrypt){\n     *  console.log(encrypt);\n     * }else{\n     *  console.log('ERROR');\n     * }\n     * \n   **/\n   async encrypt(text:string){\n    const response =  await firstValueFrom(this.post('encrypt', {text: text}))\n    if(response.success){\n      return response.output;\n    }else{\n      return null;\n    }\n  }\n   /**\n     * Decrypt an encrypted text in the server to get plain text\n     *\n     * @param encrypted - A string to encrypt\n     * \n     * @returns A string the plain text of an encrypted text or null if an error has occured\n     *\n     * @example\n     * const plainText = this.API.decrypt('Asi12iUSIDUAISDU12');\n     * if(plainText){\n     *  console.log(plainText);\n     * }else{\n     *  console.log('ERROR');\n     * }\n     * \n   **/\n   async decrypt(encrypted:string){\n    const response =  await firstValueFrom(this.post('decrypt', {encrypted: encrypted}))\n    if(response.success){\n      return response.output;\n    }else{\n      return null;\n    }\n  }\n   /**\n     * Checks if a value matches a hash\n     *\n     * @param text - A string to check\n     * \n     * @param hash - A hash string to check\n     * \n     * @returns - True if text and hash matches, false otherwise\n     *\n     * @example\n     * const match = this.API.verifyHash('text','$2aasdkk2.123i123ijasudfklajsdla');\n     * if(match == null){\n     *  console.log('ERROR');\n      * return;\n     * }\n     * \n     * console.log(match);\n     * \n   **/\n   async verifyHash(text:string,hash:string){\n    const response =  await firstValueFrom(this.post('verify_hash', {text: text, hash:hash}))\n    if(response.success){\n      return response.output;\n    }else{\n      return null;\n    }\n  }\n  /**\n     * Creates a unique identifier with the length of 32\n     *\n     * @returns A random unique 32 string identifier\n     *\n     * @example\n     * const id = this.API.createUniqueID32();\n     * \n     * \n   **/\n  createUniqueID32() {\n    if(this.config == undefined){\n      alert('Config must be initialized, try service.initialize(config)');\n    }\n    const timestamp = Date.now().toString(16); // Get current time in hex\n      const randomPart = 'xxxxxxxxxxxxxxxx'.replace(/x/g, () => {\n          return (Math.random() * 16 | 0).toString(16);\n      });\n      return timestamp + randomPart.slice(0, 16); // Combine timestamp with random part\n  }\n\n  private post(method: string, body: {}) {\n    if(this.config == undefined){\n      alert('Config must be initialized, try service.initialize(config)');\n    }\n    for (var [key, obj] of Object.entries<any>(body)) {\n      if (key == 'values') {\n        for (var [field, value] of Object.entries(obj)) {\n          obj[field] = value ?? '';\n        }\n      }\n    }\n    const headers = new HttpHeaders({\n      'X-Requested-With': 'XMLHttpRequest',\n      'Content-Type': 'application/json',\n    });\n    const salt = new Date().getTime();\n    return this.http.post<any>(\n      this.config?.api + '?' + salt,\n      JSON.stringify(\n        Object.assign(\n          {\n            API_KEY: this.config?.apiKey,\n            App: this.config?.app,\n            Method: method,\n          },\n          body\n        )\n      ),\n      { headers }\n    );\n  }\n\n  \n  // CREATE READ UPDATE AND DELETE HANDLERS\n\n  /**\n     * Runs an insert query to the server.\n     *\n     * @param postObject - An object containing tables, and values for the SQL query.\n     * @returns A respose object \n     *\n     * @example\n     * const details.password = this.API.hash(details.password);\n     * \n     * const data = await this.API.create({\n     *   tables: 'admin',\n     *   values: {\n     *    'email':this.API.coreForm['email'],\n     *    'password': this.API.coreForm['password'], \n     *  },\n     * });\n     * \n     * if(data.success){\n     *  console.log(data.output);\n     * }\n     * \n   **/\n  async create(postObject:CoreCreateObject):Promise<CoreResponse>{\n    if(this.config == undefined){\n      alert('Config must be initialized, try service.initialize(config)');\n    }\n    return  await firstValueFrom(this.post('create_entry', {\n      'data': JSON.stringify(postObject),\n    }));\n  }\n\n  /**\n     * Runs an read query to the server.\n     *\n     * @param postObject - An object containing selectors, tables, and conditions for the SQL query.\n     * @returns A respose object \n     *\n     * @example\n     * const data = await this.API.read({\n     *   selectors: [\n     *     'f_admin.ID',\n     *     'Username',\n     *     'Email',\n     *     'COUNT(f_messages.ID) as inbox'\n     *   ],\n     *   tables: 'f_admin',\n     *   conditions: `WHERE email = ${this.API.coreForm['email']}`\n     * });\n     * \n     * if(data.success && data.output.length > 0){\n     * // single output\n     *  console.log(data.output[0]);\n     * // all outtput\n     *  for(let row of data.output){\n     *    console.log(row);\n     *  }\n     * }\n     * \n   **/\n  async read(postObject:CoreReadObject):Promise<CoreResponse>{\n    if(this.config == undefined){\n      alert('Config must be initialized, try service.initialize(config)');\n    }\n    return await firstValueFrom(this.post('get_entries', {\n      'data': JSON.stringify(postObject),\n    }));\n  }\n   /**\n     * Runs an update query to the server.\n     *\n     * @param postObject - An object containing selectors, values ,tables, and conditions for the SQL query.\n     * @returns A respose object \n     *\n     * @example\n     * const encrypted = this.API.hash(this.API.coreForm['password']);\n     * \n     * const data = await this.API.update({\n     *   tables: 'f_admin',\n     *   values: {\n     *    'email':this.API.coreForm['email'],\n     *    'password': encrypted, \n     *   },\n     *   conditions: `WHERE email = ${this.API.coreForm['email']}`\n     * });\n     * \n     * if(data.success){\n     *   console.log(data.output);\n     * }\n     * \n   **/\n  async update(postObject:CoreUpdateObject):Promise<CoreResponse>{\n    if(this.config == undefined){\n      alert('Config must be initialized, try service.initialize(config)');\n    }\n   return firstValueFrom( this.post('update_entry', {\n    'data': JSON.stringify(postObject),\n  }));\n  }\n\n  /**\n     * Runs an delete query to the server.\n     *\n     * @param postObject - An object containing tables, and conditions for the SQL query.\n     * @returns A respose object \n     *\n     * @example\n     * const data = await this.API.delete({\n     *   tables: 'f_admin',\n     *   conditions: `WHERE email = ${this.API.coreForm['email']}`\n     * });\n     * \n     * if(data.success){\n     *   console.log(data.output);\n     * }\n     * \n   **/\n  async delete(postObject:CoreDeleteObject):Promise<CoreResponse>{\n    if(this.config == undefined){\n      alert('Config must be initialized, try service.initialize(config)');\n    }\n    return await firstValueFrom(this.post('delete_entry', {\n      data: JSON.stringify(postObject),\n    }))\n  }\n\n  // FILE HANDLERS\n\n   /**\n     * Get complete file URL from the server\n     *\n     * @param file - A string that points to the file.\n     * @returns A complete url string from the server \n     *\n     * @example\n     * const url = this.API.getFileURL('files/profile.png');\n     * \n     * OUTPUT:\n     *  https://localhost:8080/files/profile.png\n     * \n   **/\n  getFileURL(file: string):string|undefined {\n    if(this.config == undefined){\n      alert(\"Please initialize uswagon core on root app.component.ts\");\n      return;\n    }\n    if (file) {\n      if (file.includes('http')) return file;\n      return this.config?.server + `/${this.config.app}/` + file ;\n    }\n    return file;\n  }\n\n   /**\n     * Uploads a file to the server\n     *\n     * @param file - A File to upload\n     * @param filename - A string that points to where the file to be stored in the server\n     * @param chunkSize - A number representing the number of bytes to upload per chunk\n     *\n     * @example\n     * \n     * getUploadProgress(){\n     *  return this.API.uploadProgress\n     * }\n     * \n     * await this.API.uploadFile(somefile, 'files/profile.png');\n     * \n     * OUTPUT:\n     * <div>{{getUploadProgress()}}<div> // dynamically updates the progress\n   **/\n  uploadFile(file: File, filename: string, chunkSize: number = 1024 * 1024): Promise<void> {\n    if(this.config == undefined){\n      alert(\"Please initialize uswagon core on root app.component.ts\");\n      return new Promise(()=>{return null});\n    }\n    return new Promise((resolve, reject) => {\n      const totalChunks = Math.ceil(file.size / chunkSize);\n      let uploadedChunks = 0; // Track uploaded chunks\n\n      const uploadChunk = (chunkIndex: number) => {\n        const start = chunkIndex * chunkSize;\n        const end = Math.min(start + chunkSize, file.size);\n        const chunk = file.slice(start, end);\n\n        const reader = new FileReader();\n        reader.onloadend = () => {\n          const base64String = (reader.result as string).split(',')[1];\n\n          this.http\n            .post(this.config?.nodeserver + '/filehandler-progress', {\n              key: this.config?.apiKey,\n              app: this.config?.app,\n              method: 'create_url',\n              chunk: base64String,\n              fileName: `${this.config?.app}/` + filename,\n              chunkIndex: chunkIndex,\n              totalChunks: totalChunks,\n            })\n            .subscribe({\n              next: () => {\n                uploadedChunks++;\n                this.uploadProgress = Math.round((uploadedChunks / totalChunks) * 100);\n                if (chunkIndex + 1 < totalChunks) {\n                  // Upload next chunk\n                  uploadChunk(chunkIndex + 1);\n                } else {\n                  // console.log(`File upload complete: ${filename}`);\n                  this.uploadProgress = undefined;\n                  resolve(); // Resolve the promise when the upload is complete\n                }\n              },\n              error: (err) => {\n                // console.error('Error uploading chunk', err);\n                reject(err); // Reject the promise on error\n              },\n            });\n        };\n\n        reader.readAsDataURL(chunk);\n      };\n\n      // Start uploading the first chunk\n      uploadChunk(0);\n    });\n  }\n}\n","/*\n * Public API Surface of uswagon-core\n */\n\nexport * from './lib/uswagon-core.service';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}