{"version":3,"file":"uswagon-auth.mjs","sources":["../../../projects/uswagon-auth/src/lib/uswagon-auth.service.ts","../../../projects/uswagon-auth/src/lib/uswagon-login-button/uswagon-login-button.component.ts","../../../projects/uswagon-auth/src/lib/uswagon-login-button/uswagon-login-button.component.html","../../../projects/uswagon-auth/src/lib/uswagon-auth-input/uswagon-auth-input.component.ts","../../../projects/uswagon-auth/src/lib/uswagon-auth-input/uswagon-auth-input.component.html","../../../projects/uswagon-auth/src/lib/uswagon-auth-input-error/uswagon-auth-input-error.component.ts","../../../projects/uswagon-auth/src/lib/uswagon-auth-input-error/uswagon-auth-input-error.component.html","../../../projects/uswagon-auth/src/lib/uswagon-remember-me/uswagon-remember-me.component.ts","../../../projects/uswagon-auth/src/lib/uswagon-remember-me/uswagon-remember-me.component.html","../../../projects/uswagon-auth/src/lib/uswagon-register-button/uswagon-register-button.component.ts","../../../projects/uswagon-auth/src/lib/uswagon-register-button/uswagon-register-button.component.html","../../../projects/uswagon-auth/src/lib/uswagon-auth.module.ts","../../../projects/uswagon-auth/src/lib/types/uswagon-auth.types.ts","../../../projects/uswagon-auth/src/public-api.ts","../../../projects/uswagon-auth/src/uswagon-auth.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport {  AuthConfig, AuthForm, AuthValidator } from './types/uswagon-auth.types';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UswagonAuthService {\n\n  private usedStorage = this.isLocalStorage() ? localStorage : sessionStorage;\n  private config:AuthConfig|undefined;\n  private loading:boolean = false;\n  private snackbarFeedback:string = '';\n  private authForm:AuthForm = {};\n  private validators:AuthValidator = {\n    email: {\n      pattern: '^[\\\\w-.]+@[\\\\w-]+\\\\.[a-zA-Z]{2,}([.][a-zA-Z]{2,})*$',\n      message: 'Email is not valid.'\n    },\n    password: {\n        pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\\\\d)(?=.*[!@#$%^&*])[A-Za-z\\\\d!@#$%^&*]{8,}$',\n        message: 'Password must be at least 8 characters long and include uppercase, lowercase, number, and special character.'\n    },\n    phone: {\n        pattern: '^(\\\\+\\\\d{1,3}\\\\s?)?\\\\(?\\\\d{3}\\\\)?[-\\\\s]?\\\\d{3}[-\\\\s]?\\\\d{4}$',\n        message: 'Phone number must be in a valid format.'\n    },\n    username: {\n      pattern: '^[a-zA-Z0-9]{3,15}$',\n      message: 'Username must be 3-15 characters long and can only contain letters and numbers.'\n    },\n    creditCard: {\n        pattern: '^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9]{2})[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|7[0-9]{15})$',\n        message: 'Invalid credit card number.'\n    },\n    postalCode: {\n      pattern: '^\\\\d{5}(-\\\\d{4})?$',\n      message: 'Postal code must be in the format 12345 or 12345-6789.'\n  },\n  };\n\n  constructor(\n    private http: HttpClient,\n    private router: Router,\n  ) { }\n\n  initialize(config:AuthConfig){\n    this.config = config;\n    this.authForm = {};\n  }\n\n  validateInputFields(){\n    for(const key of Object.keys(this.authForm)){\n      const { value, validator, required } = this.authForm[key];\n      if(required && value.trim() ==''){\n        this.authForm[key].error = 'This field is required!';\n      }else{\n        if (validator) {\n          // check if validator is not custom\n          if(this.validators[validator] == null){\n              try {\n                  const regex =  new RegExp(validator);\n                  const isValid = regex.test(value);\n                  if(!isValid){\n                    this.authForm[key].error = `${key.charAt(0).toUpperCase() + key.slice(1)} is not a valid input.`;\n                  }else{\n                    this.authForm[key].error = undefined;\n                  }\n                  return;\n              } catch {\n                console.error('Custom validator should be on regex');\n                throw new Error('Custom validator should be on regex')\n              }\n          \n          }\n\n          const regex = new RegExp(this.validators[validator].pattern);\n          const isValid = regex.test(value);\n          \n\n          if (!isValid) {\n            this.authForm[key].error = this.validators[validator].message;\n          }else{\n            this.authForm[key].error = undefined;\n          }\n        } else {\n            this.authForm[key].error = undefined;\n        }\n      }\n      \n    }\n  }\n\n  getAuthField(key:string){\n    return this.authForm[key];\n  }\n  \n  initializeFormField(key:string, required:boolean , type:string ,validator?:string){\n    this.authForm[key]= {value:'', validator:validator, required:required, type:type};\n  }\n\n  handleFormValue(key:string, value:string){\n    this.authForm[key].value = value;\n  }\n\n  isLocalStorage() {\n    const storage = localStorage.getItem('storage');\n    return storage == 'local';\n    \n  }\n\n  getSavedEmail() {\n    const email = localStorage.getItem('remember');\n    return email;\n  }\n\n  useLocalStorage() {\n    localStorage.setItem('storage', 'local');\n  }\n\n  useSessionStorage() {\n    localStorage.setItem('storage', 'session');\n  }\n\n  post(method: string, body: {}) {\n    if(this.config == undefined){\n      console.error('Config must be initialized, try service.initialize(config)');\n      throw new Error('Config must be initialized, try service.initialize(config)');\n    }\n    for (var [key, obj] of Object.entries<any>(body)) {\n      if (key == 'values') {\n        for (var [field, value] of Object.entries(obj)) {\n          obj[field] = value ?? '';\n        }\n      }\n    }\n    const headers = new HttpHeaders({\n      'X-Requested-With': 'XMLHttpRequest',\n      'Content-Type': 'application/json',\n    });\n    const salt = new Date().getTime();\n    return this.http.post<any>(\n      this.config?.api + '?' + salt,\n      JSON.stringify(\n        Object.assign(\n          {\n            API_KEY: this.config?.apiKey,\n            Method: method,\n          },\n          body\n        )\n      ),\n      { headers }\n    );\n  }\n\n\n  login() {\n    // check if username and password fields are present\n    if(this.authForm['username']==null || this.authForm['password'] == null){\n      console.log('Please initialize username and password fields using [name]=\"field\"');\n      throw new Error('Please initialize username and password fields using [name]=\"field\"')\n    }\n    this.loading = true;\n    return this.post('login', {\n      Username: this.authForm['username'].value,\n      Password: this.authForm['password'].value,\n    }).subscribe((data:any) => {\n      this.loading = false;\n      this.snackbarFeedback = data.success ? 'Login Successful!' : data.output;\n      if (data.success) {\n        this.usedStorage.setItem(\n          'logged_in',\n          data.output.accountType.toString()\n        );\n        var account ='student';\n        switch(parseInt(data.output.accountType.toString())) {\n          case 0:\n            account = 'student';\n            break;\n          case 1:\n            account = 'teacher';\n            break;\n          case 2:\n            account = 'admin';\n            break;\n        }\n        const user = data.output;\n        this.usedStorage.setItem('user_info', JSON.stringify(user));\n        this.router.navigate([this.config?.redirect[account]]);\n      }\n    });\n\n  }\n}\n","import { Component, Input } from '@angular/core';\nimport { UswagonAuthService } from '../uswagon-auth.service';\n\n@Component({\n  selector: 'uswagon-login-button',\n  templateUrl: './uswagon-login-button.component.html',\n  styleUrls: ['./uswagon-login-button.component.css']\n})\nexport class UswagonLoginButtonComponent {\n  @Input() class:string ='';\n\n  constructor(private API:UswagonAuthService){}\n  \n\n  login(){\n    this.API.login();\n  }\n}\n","<button [class]=\"class\" (click)=\"login()\">\n    <ng-content></ng-content>\n</button>","import { Component, Input, OnInit } from '@angular/core';\nimport { UswagonAuthService } from '../uswagon-auth.service';\n\n@Component({\n  selector: 'uswagon-auth-input',\n  templateUrl: './uswagon-auth-input.component.html',\n  styleUrls: ['./uswagon-auth-input.component.css']\n})\nexport class UswagonAuthInputComponent implements OnInit {\n  @Input() name:string | undefined;\n  @Input() required:boolean = false;\n  @Input() validator?:string;\n  @Input() type:string = 'text';\n  @Input() class:string = '';\n  constructor(private API:UswagonAuthService){}\n  ngOnInit(): void {\n    if(this.name==undefined){\n      console.error('Uswagon Input Component must have a [name]=\"value\" property')\n      throw new Error('Uswagon Input Component must have a [name]=\"value\" property')\n    }\n    this.API.initializeFormField(this.name, this.required,this.type , this.validator);\n  }\n\n  handleInput(event: any) {\n    this.API.handleFormValue(this.name!, event.target.value)\n  }\n}\n","<input [class]=\"class\" [type]=\"type\">","import { Component, Input, OnInit } from '@angular/core';\nimport { UswagonAuthService } from '../uswagon-auth.service';\n\n@Component({\n  selector: 'lib-uswagon-auth-input-error',\n  templateUrl: './uswagon-auth-input-error.component.html',\n  styleUrls: ['./uswagon-auth-input-error.component.css']\n})\nexport class UswagonAuthInputErrorComponent implements OnInit {\n  \n  @Input() name:string|undefined;\n  @Input() class:string ='';\n  constructor(private API:UswagonAuthService){}\n\n\n  ngOnInit(): void {\n    if(this.name==undefined){\n      console.error('Uswagon Input Component must have a [name]=\"value\" property')\n      throw new Error('Uswagon Input Component must have a [name]=\"value\" property')\n    }\n    const field = this.API.getAuthField(this.name)\n    if(field == null){\n      console.error('Uswagon Input Error Component must be connected to a text field with [name]=\"value\" property')\n      throw new Error('Uswagon Input Error Component must be connected to a text field with [name]=\"value\" property')\n    }\n  }\n\n  hasError(){\n    return this.API.getAuthField(this.name!).error != null;\n  }\n\n  getErrorMessage(){\n    return this.API.getAuthField(this.name!).error;\n  }\n\n  \n}\n","<div [hidden]=\"!hasError()\" [class]=\"class\">{{getErrorMessage()}}\n    <ng-content></ng-content>\n</div>\n","import { Component } from '@angular/core';\nimport { UswagonAuthService } from '../uswagon-auth.service';\n\n@Component({\n  selector: 'lib-uswagon-remember-me',\n  templateUrl: './uswagon-remember-me.component.html',\n  styleUrls: ['./uswagon-remember-me.component.css']\n})\nexport class UswagonRememberMeComponent {\n  constructor(private API:UswagonAuthService){}\n  persistent:boolean = this.API.isLocalStorage();\n  togglePersistentLogin(){\n    this.persistent = !this.persistent;\n    if(this.persistent){\n      this.API.useLocalStorage();\n    } else{\n      this.API.useSessionStorage();\n    }\n  }\n\n}\n","<input type=\"checkbox\" [value]=\"persistent\" (click)=\"togglePersistentLogin()\">\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'uswagon-register-button',\n  templateUrl: './uswagon-register-button.component.html',\n  styleUrls: ['./uswagon-register-button.component.css']\n})\nexport class UswagonRegisterButtonComponent {\n\n}\n","<p>uswagon-register-button works!</p>\n","import { NgModule } from '@angular/core';\nimport { UswagonLoginButtonComponent } from './uswagon-login-button/uswagon-login-button.component';\nimport { UswagonRegisterButtonComponent } from './uswagon-register-button/uswagon-register-button.component';\nimport { UswagonAuthInputComponent } from './uswagon-auth-input/uswagon-auth-input.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { UswagonRememberMeComponent } from './uswagon-remember-me/uswagon-remember-me.component';\nimport { UswagonAuthInputErrorComponent } from './uswagon-auth-input-error/uswagon-auth-input-error.component';\n\n@NgModule({\n  declarations: [\n    UswagonLoginButtonComponent,\n    UswagonRegisterButtonComponent,\n    UswagonAuthInputComponent,\n    UswagonRememberMeComponent,\n    UswagonAuthInputErrorComponent,\n  ],\n  imports: [\n    HttpClientModule\n  ],\n  exports: [\n    UswagonLoginButtonComponent,\n    UswagonRegisterButtonComponent,\n    UswagonAuthInputComponent,\n    UswagonRememberMeComponent,\n    UswagonAuthInputErrorComponent,\n  ]\n})\nexport class UswagonAuthModule { }\n","export interface AuthRedirect {\r\n  [role: string]: string;\r\n}\r\n\r\n\r\n\r\nexport interface AuthFormField {\r\n  value: any;\r\n  required: boolean;\r\n  type: string;\r\n  error?:string;\r\n  validator?: string;\r\n}\r\n\r\nexport interface AuthForm {\r\n    [key: string]: AuthFormField;\r\n}\r\n\r\nexport interface AuthConfig {\r\n    api:string;\r\n    apiKey:string;\r\n    usertable:string[];\r\n    redirect:AuthRedirect;\r\n}\r\ninterface AuthValidatorConfig {\r\n  pattern: string;\r\n  message: string;\r\n}\r\nexport interface AuthValidator {\r\n  [key: string]: AuthValidatorConfig;\r\n};\r\n","/*\n * Public API Surface of uswagon-auth\n */\n\nexport * from './lib/uswagon-auth.service';\nexport * from './lib/uswagon-login-button/uswagon-login-button.component';\nexport * from './lib/uswagon-auth-input/uswagon-auth-input.component';\nexport * from './lib/uswagon-auth-input-error/uswagon-auth-input-error.component';\nexport * from './lib/uswagon-remember-me/uswagon-remember-me.component';\nexport * from './lib/uswagon-register-button/uswagon-register-button.component';\n\nexport * from './lib/uswagon-auth.module';\n\nexport * from './lib/types/uswagon-auth.types';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.UswagonAuthService"],"mappings":"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"}